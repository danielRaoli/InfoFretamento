// <auto-generated />
using System;
using InfoFretamento.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfoFretamento.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250129175123_update-salario")]
    partial class updatesalario
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Abastecimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Litros")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ViagemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ViagemId");

                    b.ToTable("Abastecimentos");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Adiantamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TipoVerba")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("ValorDeAcerto")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Verba")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ViagemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ViagemId")
                        .IsUnique();

                    b.ToTable("Adiantamentos");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.AdicionarPeca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DataDeEntrada")
                        .HasColumnType("date");

                    b.Property<int>("Parcelas")
                        .HasColumnType("int");

                    b.Property<int>("PecaId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecoTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<string>("TipoPagamento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PecaId");

                    b.ToTable("Adicionamentos");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Boleto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DataEmissao")
                        .HasColumnType("DATE");

                    b.Property<int>("DespesaId")
                        .HasColumnType("int");

                    b.Property<decimal>("Juros")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<bool>("Pago")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Valor")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<DateOnly>("Vencimento")
                        .HasColumnType("DATE");

                    b.HasKey("Id");

                    b.HasIndex("DespesaId");

                    b.ToTable("Boletos");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Despesa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CentroCusto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("DataCompra")
                        .HasColumnType("DATE");

                    b.Property<DateOnly?>("DataPagamento")
                        .HasColumnType("DATE");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("EntidadeId")
                        .HasColumnType("int");

                    b.Property<string>("EntidadeOrigem")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FormaPagamento")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Parcelas")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<DateOnly?>("Vencimento")
                        .HasColumnType("DATE");

                    b.HasKey("Id");

                    b.ToTable("Despesas");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.DespesaMensal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CentroDeCusto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DiaPagamento")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("DECIMAL(18,2)");

                    b.HasKey("Id");

                    b.ToTable("DespesaMensal");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Documento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Pendente")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly>("Vencimento")
                        .HasColumnType("DATE");

                    b.HasKey("Id");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Ferias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("FimFerias")
                        .HasColumnType("DATE");

                    b.Property<DateOnly>("InicioFerias")
                        .HasColumnType("DATE");

                    b.Property<int>("ResponsavelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResponsavelId");

                    b.ToTable("Ferias");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Manutencao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Custo")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<DateOnly>("DataLancamento")
                        .HasColumnType("DATE");

                    b.Property<DateOnly>("DataPrevista")
                        .HasColumnType("DATE");

                    b.Property<DateOnly?>("DataRealizada")
                        .HasColumnType("DATE");

                    b.Property<int>("KmAtual")
                        .HasColumnType("int");

                    b.Property<int>("KmPrevista")
                        .HasColumnType("int");

                    b.Property<int>("KmRealizada")
                        .HasColumnType("int");

                    b.Property<int>("Parcelas")
                        .HasColumnType("int");

                    b.Property<bool>("Realizada")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ServicoId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TipoPagamento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("VeiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServicoId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("Manutencoes");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.MotoristaViagem", b =>
                {
                    b.Property<int>("MotoristaId")
                        .HasColumnType("int");

                    b.Property<int>("ViagemId")
                        .HasColumnType("int");

                    b.HasKey("MotoristaId", "ViagemId");

                    b.HasIndex("ViagemId");

                    b.ToTable("MotoristaViagens");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Pagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DataPagamento")
                        .HasColumnType("DATE");

                    b.Property<int>("ReceitaId")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorPago")
                        .HasColumnType("DECIMAL(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaId");

                    b.ToTable("Pagamentos");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.PagamentoDespesa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DataPagamento")
                        .HasColumnType("DATE");

                    b.Property<int>("DespesaId")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorPago")
                        .HasColumnType("DECIMAL(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DespesaId");

                    b.ToTable("PagamentosDespesa");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Passagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CidadePassageiro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CpfPassageiro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("DataEmissao")
                        .HasColumnType("DATE");

                    b.Property<string>("EmailPassageiro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FormaPagamento")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("NomePassageiro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ParadaPassageiro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("PoltronaIda")
                        .HasColumnType("int");

                    b.Property<int?>("PoltronaVolta")
                        .HasColumnType("int");

                    b.Property<string>("Situacao")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("TelefonePassageiro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<int>("ViagemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ViagemId");

                    b.ToTable("Passagens");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Peca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Preco")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Pecas");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("char(14)")
                        .IsFixedLength();

                    b.Property<DateOnly>("DataNascimento")
                        .HasColumnType("DATE");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Pessoa");

                    b.HasDiscriminator().HasValue("Pessoa");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Receita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CentroCusto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("DataCompra")
                        .HasColumnType("DATE");

                    b.Property<string>("FormaPagamento")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrigemPagamento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<DateOnly>("Vencimento")
                        .HasColumnType("DATE");

                    b.Property<int>("ViagemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ViagemId")
                        .IsUnique();

                    b.ToTable("Receitas");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.RetiradaPeca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DataDeRetirada")
                        .HasColumnType("date");

                    b.Property<int>("PecaId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecoTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<int>("VeiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PecaId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("Retiradas");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Salario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiaSalario")
                        .HasColumnType("int");

                    b.Property<int>("DiaVale")
                        .HasColumnType("int");

                    b.Property<int>("ResponsavelId")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("DECIMAL(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ResponsavelId")
                        .IsUnique();

                    b.ToTable("Salario");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Servico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NomeServico")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Servicos");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Veiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Acessorios")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<int>("CapacidadeTank")
                        .HasColumnType("int");

                    b.Property<string>("Carroceria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("KmAtual")
                        .HasColumnType("int");

                    b.Property<string>("LocalEmplacado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Prefixo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("QuantidadePoltronas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Veiculos");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Viagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Itinerario")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("KmFinalVeiculo")
                        .HasColumnType("int");

                    b.Property<int>("KmInicialVeiculo")
                        .HasColumnType("int");

                    b.Property<int?>("MotoristaId")
                        .HasColumnType("int");

                    b.Property<int>("Parcelas")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TipoPagamento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TipoServico")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TipoViagem")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("ValorContratado")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<decimal>("ValorDespesas")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("VeiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("MotoristaId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("Viagens");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.ViagemProgramada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FormaPagto")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Guia")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Itinerario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Responsavel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("ValorPassagem")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<decimal>("ValorPassagemIdaVolta")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<int>("VeiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VeiculoId");

                    b.ToTable("ViagensProgramadas");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Cliente", b =>
                {
                    b.HasBaseType("InfoFretamento.Domain.Entities.Pessoa");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Pessoa", t =>
                        {
                            t.Property("NomeFantasia")
                                .HasColumnName("Cliente_NomeFantasia");

                            t.Property("Tipo")
                                .HasColumnName("Cliente_Tipo");
                        });

                    b.HasDiscriminator().HasValue("Cliente");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Colaborador", b =>
                {
                    b.HasBaseType("InfoFretamento.Domain.Entities.Pessoa");

                    b.HasDiscriminator().HasValue("Colaborador");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Fornecedor", b =>
                {
                    b.HasBaseType("InfoFretamento.Domain.Entities.Pessoa");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Fornecedor");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Motorista", b =>
                {
                    b.HasBaseType("InfoFretamento.Domain.Entities.Pessoa");

                    b.Property<DateOnly>("DataAdmissao")
                        .HasColumnType("DATE");

                    b.HasDiscriminator().HasValue("Motorista");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Abastecimento", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.Viagem", "Viagem")
                        .WithMany("Abastecimentos")
                        .HasForeignKey("ViagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Viagem");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Adiantamento", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.Viagem", "Viagem")
                        .WithOne("Adiantamento")
                        .HasForeignKey("InfoFretamento.Domain.Entities.Adiantamento", "ViagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Viagem");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.AdicionarPeca", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.Peca", "Peca")
                        .WithMany()
                        .HasForeignKey("PecaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Peca");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Boleto", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.Despesa", "Despesa")
                        .WithMany("Boletos")
                        .HasForeignKey("DespesaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Despesa");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Ferias", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.Colaborador", null)
                        .WithMany("Ferias")
                        .HasForeignKey("ResponsavelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfoFretamento.Domain.Entities.Motorista", null)
                        .WithMany("Ferias")
                        .HasForeignKey("ResponsavelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfoFretamento.Domain.Entities.Pessoa", "Responsavel")
                        .WithMany()
                        .HasForeignKey("ResponsavelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Responsavel");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Manutencao", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.Servico", "Servico")
                        .WithMany()
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InfoFretamento.Domain.Entities.Veiculo", "Veiculo")
                        .WithMany("Manutencoes")
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Servico");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.MotoristaViagem", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.Motorista", "Motorista")
                        .WithMany("MotoristaViagens")
                        .HasForeignKey("MotoristaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfoFretamento.Domain.Entities.Viagem", "Viagem")
                        .WithMany("MotoristaViagens")
                        .HasForeignKey("ViagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motorista");

                    b.Navigation("Viagem");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Pagamento", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.Receita", "Receita")
                        .WithMany("Pagamentos")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receita");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.PagamentoDespesa", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.Despesa", "Despesa")
                        .WithMany("Pagamentos")
                        .HasForeignKey("DespesaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Despesa");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Passagem", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.ViagemProgramada", "Viagem")
                        .WithMany("Passagens")
                        .HasForeignKey("ViagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Viagem");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Pessoa", b =>
                {
                    b.OwnsOne("InfoFretamento.Domain.ValueObjects.DocumentoCliente", "Documento", b1 =>
                        {
                            b1.Property<int>("PessoaId")
                                .HasColumnType("int");

                            b1.Property<string>("Documento")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)");

                            b1.Property<string>("Tipo")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)");

                            b1.HasKey("PessoaId");

                            b1.ToTable("Pessoa");

                            b1.WithOwner()
                                .HasForeignKey("PessoaId");
                        });

                    b.OwnsOne("InfoFretamento.Domain.ValueObjects.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<int>("PessoaId")
                                .HasColumnType("int");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("varchar(10)");

                            b1.Property<string>("Rua")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("Uf")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("varchar(2)");

                            b1.HasKey("PessoaId");

                            b1.ToTable("Pessoa");

                            b1.WithOwner()
                                .HasForeignKey("PessoaId");
                        });

                    b.Navigation("Documento")
                        .IsRequired();

                    b.Navigation("Endereco")
                        .IsRequired();
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Receita", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.Viagem", "Viagem")
                        .WithOne("Receita")
                        .HasForeignKey("InfoFretamento.Domain.Entities.Receita", "ViagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Viagem");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.RetiradaPeca", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.Peca", "Peca")
                        .WithMany()
                        .HasForeignKey("PecaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfoFretamento.Domain.Entities.Veiculo", "Veiculo")
                        .WithMany()
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Peca");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Salario", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.Pessoa", "Responsavel")
                        .WithOne()
                        .HasForeignKey("InfoFretamento.Domain.Entities.Salario", "ResponsavelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Responsavel");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Viagem", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Viagens")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfoFretamento.Domain.Entities.Motorista", null)
                        .WithMany("Viagens")
                        .HasForeignKey("MotoristaId");

                    b.HasOne("InfoFretamento.Domain.Entities.Veiculo", "Veiculo")
                        .WithMany("Viagens")
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("InfoFretamento.Domain.ValueObjects.Horario", "DataHorarioChegada", b1 =>
                        {
                            b1.Property<int>("ViagemId")
                                .HasColumnType("int");

                            b1.Property<DateOnly>("Data")
                                .HasColumnType("DATE");

                            b1.Property<string>("Hora")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("varchar(5)");

                            b1.HasKey("ViagemId");

                            b1.ToTable("Viagens");

                            b1.WithOwner()
                                .HasForeignKey("ViagemId");
                        });

                    b.OwnsOne("InfoFretamento.Domain.ValueObjects.Horario", "DataHorarioRetorno", b1 =>
                        {
                            b1.Property<int>("ViagemId")
                                .HasColumnType("int");

                            b1.Property<DateOnly>("Data")
                                .HasColumnType("DATE");

                            b1.Property<string>("Hora")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("varchar(5)");

                            b1.HasKey("ViagemId");

                            b1.ToTable("Viagens");

                            b1.WithOwner()
                                .HasForeignKey("ViagemId");
                        });

                    b.OwnsOne("InfoFretamento.Domain.ValueObjects.Horario", "DataHorarioSaida", b1 =>
                        {
                            b1.Property<int>("ViagemId")
                                .HasColumnType("int");

                            b1.Property<DateOnly>("Data")
                                .HasColumnType("DATE");

                            b1.Property<string>("Hora")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("varchar(5)");

                            b1.HasKey("ViagemId");

                            b1.ToTable("Viagens");

                            b1.WithOwner()
                                .HasForeignKey("ViagemId");
                        });

                    b.OwnsOne("InfoFretamento.Domain.ValueObjects.Horario", "DataHorarioSaidaGaragem", b1 =>
                        {
                            b1.Property<int>("ViagemId")
                                .HasColumnType("int");

                            b1.Property<DateOnly>("Data")
                                .HasColumnType("DATE");

                            b1.Property<string>("Hora")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("varchar(5)");

                            b1.HasKey("ViagemId");

                            b1.ToTable("Viagens");

                            b1.WithOwner()
                                .HasForeignKey("ViagemId");
                        });

                    b.OwnsOne("InfoFretamento.Domain.ValueObjects.Rota", "Rota", b1 =>
                        {
                            b1.Property<int>("ViagemId")
                                .HasColumnType("int");

                            b1.HasKey("ViagemId");

                            b1.ToTable("Viagens");

                            b1.WithOwner()
                                .HasForeignKey("ViagemId");

                            b1.OwnsOne("InfoFretamento.Domain.ValueObjects.Local", "Retorno", b2 =>
                                {
                                    b2.Property<int>("RotaViagemId")
                                        .HasColumnType("int");

                                    b2.Property<string>("CidadeSaida")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("varchar(50)");

                                    b2.Property<string>("LocalDeSaida")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("varchar(50)");

                                    b2.Property<string>("UfSaida")
                                        .IsRequired()
                                        .HasMaxLength(2)
                                        .HasColumnType("varchar(2)");

                                    b2.HasKey("RotaViagemId");

                                    b2.ToTable("Viagens");

                                    b2.WithOwner()
                                        .HasForeignKey("RotaViagemId");
                                });

                            b1.OwnsOne("InfoFretamento.Domain.ValueObjects.Local", "Saida", b2 =>
                                {
                                    b2.Property<int>("RotaViagemId")
                                        .HasColumnType("int");

                                    b2.Property<string>("CidadeSaida")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("varchar(50)");

                                    b2.Property<string>("LocalDeSaida")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("varchar(50)");

                                    b2.Property<string>("UfSaida")
                                        .IsRequired()
                                        .HasMaxLength(2)
                                        .HasColumnType("varchar(2)");

                                    b2.HasKey("RotaViagemId");

                                    b2.ToTable("Viagens");

                                    b2.WithOwner()
                                        .HasForeignKey("RotaViagemId");
                                });

                            b1.Navigation("Retorno")
                                .IsRequired();

                            b1.Navigation("Saida")
                                .IsRequired();
                        });

                    b.Navigation("Cliente");

                    b.Navigation("DataHorarioChegada")
                        .IsRequired();

                    b.Navigation("DataHorarioRetorno")
                        .IsRequired();

                    b.Navigation("DataHorarioSaida")
                        .IsRequired();

                    b.Navigation("DataHorarioSaidaGaragem")
                        .IsRequired();

                    b.Navigation("Rota")
                        .IsRequired();

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.ViagemProgramada", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.Veiculo", "Veiculo")
                        .WithMany("ViagensProgramadaas")
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("InfoFretamento.Domain.ValueObjects.HorarioLocal", "Chegada", b1 =>
                        {
                            b1.Property<int>("ViagemProgramadaId")
                                .HasColumnType("int");

                            b1.Property<DateOnly>("Data")
                                .HasColumnType("date");

                            b1.Property<string>("Hora")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Local")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("ViagemProgramadaId");

                            b1.ToTable("ViagensProgramadas");

                            b1.WithOwner()
                                .HasForeignKey("ViagemProgramadaId");
                        });

                    b.OwnsOne("InfoFretamento.Domain.ValueObjects.HorarioLocal", "Retorno", b1 =>
                        {
                            b1.Property<int>("ViagemProgramadaId")
                                .HasColumnType("int");

                            b1.Property<DateOnly>("Data")
                                .HasColumnType("date");

                            b1.Property<string>("Hora")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Local")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("ViagemProgramadaId");

                            b1.ToTable("ViagensProgramadas");

                            b1.WithOwner()
                                .HasForeignKey("ViagemProgramadaId");
                        });

                    b.OwnsOne("InfoFretamento.Domain.ValueObjects.HorarioLocal", "Saida", b1 =>
                        {
                            b1.Property<int>("ViagemProgramadaId")
                                .HasColumnType("int");

                            b1.Property<DateOnly>("Data")
                                .HasColumnType("date");

                            b1.Property<string>("Hora")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Local")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("ViagemProgramadaId");

                            b1.ToTable("ViagensProgramadas");

                            b1.WithOwner()
                                .HasForeignKey("ViagemProgramadaId");
                        });

                    b.Navigation("Chegada")
                        .IsRequired();

                    b.Navigation("Retorno")
                        .IsRequired();

                    b.Navigation("Saida")
                        .IsRequired();

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Motorista", b =>
                {
                    b.OwnsOne("InfoFretamento.Domain.ValueObjects.Habilitacao", "Habilitacao", b1 =>
                        {
                            b1.Property<int>("MotoristaId")
                                .HasColumnType("int");

                            b1.Property<string>("Categoria")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Protocolo")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Uf")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<DateOnly>("Vencimento")
                                .HasColumnType("DATE");

                            b1.HasKey("MotoristaId");

                            b1.ToTable("Pessoa");

                            b1.WithOwner()
                                .HasForeignKey("MotoristaId");
                        });

                    b.Navigation("Habilitacao")
                        .IsRequired();
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Despesa", b =>
                {
                    b.Navigation("Boletos");

                    b.Navigation("Pagamentos");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Receita", b =>
                {
                    b.Navigation("Pagamentos");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Veiculo", b =>
                {
                    b.Navigation("Manutencoes");

                    b.Navigation("Viagens");

                    b.Navigation("ViagensProgramadaas");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Viagem", b =>
                {
                    b.Navigation("Abastecimentos");

                    b.Navigation("Adiantamento")
                        .IsRequired();

                    b.Navigation("MotoristaViagens");

                    b.Navigation("Receita")
                        .IsRequired();
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.ViagemProgramada", b =>
                {
                    b.Navigation("Passagens");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Viagens");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Colaborador", b =>
                {
                    b.Navigation("Ferias");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Motorista", b =>
                {
                    b.Navigation("Ferias");

                    b.Navigation("MotoristaViagens");

                    b.Navigation("Viagens");
                });
#pragma warning restore 612, 618
        }
    }
}

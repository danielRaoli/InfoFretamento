// <auto-generated />
using System;
using InfoFretamento.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InfoFretamento.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241129130836_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Despesa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCompra")
                        .HasColumnType("date");

                    b.Property<DateTime>("DataLancamento")
                        .HasColumnType("date");

                    b.Property<string>("DestinoPagamento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("GrupoCustoId")
                        .HasColumnType("integer");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("Pago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("ResponsavelId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VeiculoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Vencimento")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("GrupoCustoId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("Despesas");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Documento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Vencimento")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.GrupoDeCusto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("GruposDeCusto");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Habilitacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Protocolo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .IsFixedLength();

                    b.Property<DateTime>("Vencimento")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Habilitacoes");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character(14)")
                        .IsFixedLength();

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.ToTable("Pessoa");

                    b.HasDiscriminator().HasValue("Pessoa");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Veiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Ano")
                        .HasColumnType("integer");

                    b.Property<int>("CapacidadeTank")
                        .HasColumnType("integer");

                    b.Property<string>("Carroceria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("KmAtual")
                        .HasColumnType("integer");

                    b.Property<string>("LocalEmplacado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Prefixo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("QuantidadePoltronas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Veiculos");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Viagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataRetorno")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataSaida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HorarioRetorno")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("HorarioSaida")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("MotoristaId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TipoServico")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("VeiculoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("MotoristaId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("Viagens");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Cliente", b =>
                {
                    b.HasBaseType("InfoFretamento.Domain.Entities.Pessoa");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Cliente");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Colaborador", b =>
                {
                    b.HasBaseType("InfoFretamento.Domain.Entities.Pessoa");

                    b.HasDiscriminator().HasValue("Colaborador");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Fornecedor", b =>
                {
                    b.HasBaseType("InfoFretamento.Domain.Entities.Pessoa");

                    b.Property<string>("TipoPessoa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Fornecedor");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Motorista", b =>
                {
                    b.HasBaseType("InfoFretamento.Domain.Entities.Pessoa");

                    b.Property<int>("HabilitacaoId")
                        .HasColumnType("integer");

                    b.HasIndex("HabilitacaoId");

                    b.HasDiscriminator().HasValue("Motorista");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Despesa", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.GrupoDeCusto", "GrupoCusto")
                        .WithMany("Despesas")
                        .HasForeignKey("GrupoCustoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InfoFretamento.Domain.Entities.Veiculo", "Veiculo")
                        .WithMany("Despesas")
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GrupoCusto");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Pessoa", b =>
                {
                    b.OwnsOne("InfoFretamento.Domain.Entities.DocumentoCliente", "Documento", b1 =>
                        {
                            b1.Property<int>("PessoaId")
                                .HasColumnType("integer");

                            b1.Property<string>("Documento")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<string>("Tipo")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.HasKey("PessoaId");

                            b1.ToTable("Pessoa");

                            b1.WithOwner()
                                .HasForeignKey("PessoaId");
                        });

                    b.OwnsOne("InfoFretamento.Domain.Entities.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<int>("PessoaId")
                                .HasColumnType("integer");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<string>("Rua")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)");

                            b1.HasKey("PessoaId");

                            b1.ToTable("Pessoa");

                            b1.WithOwner()
                                .HasForeignKey("PessoaId");
                        });

                    b.Navigation("Documento")
                        .IsRequired();

                    b.Navigation("Endereco")
                        .IsRequired();
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Viagem", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Viagens")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfoFretamento.Domain.Entities.Motorista", null)
                        .WithMany("Viagens")
                        .HasForeignKey("MotoristaId");

                    b.HasOne("InfoFretamento.Domain.Entities.Veiculo", "Veiculo")
                        .WithMany()
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("InfoFretamento.Domain.Entities.Rota", "Rota", b1 =>
                        {
                            b1.Property<int>("ViagemId")
                                .HasColumnType("integer");

                            b1.HasKey("ViagemId");

                            b1.ToTable("Viagens");

                            b1.WithOwner()
                                .HasForeignKey("ViagemId");

                            b1.OwnsOne("InfoFretamento.Domain.Entities.Local", "Retorno", b2 =>
                                {
                                    b2.Property<int>("RotaViagemId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("CidadeDestino")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)");

                                    b2.Property<string>("CidadeSaida")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)");

                                    b2.Property<string>("LocalDeSaida")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("UfSaida")
                                        .IsRequired()
                                        .HasMaxLength(2)
                                        .HasColumnType("character varying(2)");

                                    b2.HasKey("RotaViagemId");

                                    b2.ToTable("Viagens");

                                    b2.WithOwner()
                                        .HasForeignKey("RotaViagemId");
                                });

                            b1.OwnsOne("InfoFretamento.Domain.Entities.Local", "Saida", b2 =>
                                {
                                    b2.Property<int>("RotaViagemId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("CidadeDestino")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)");

                                    b2.Property<string>("CidadeSaida")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)");

                                    b2.Property<string>("LocalDeSaida")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("UfSaida")
                                        .IsRequired()
                                        .HasMaxLength(2)
                                        .HasColumnType("character varying(2)");

                                    b2.HasKey("RotaViagemId");

                                    b2.ToTable("Viagens");

                                    b2.WithOwner()
                                        .HasForeignKey("RotaViagemId");
                                });

                            b1.Navigation("Retorno")
                                .IsRequired();

                            b1.Navigation("Saida")
                                .IsRequired();
                        });

                    b.Navigation("Cliente");

                    b.Navigation("Rota")
                        .IsRequired();

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Motorista", b =>
                {
                    b.HasOne("InfoFretamento.Domain.Entities.Habilitacao", "Habilitacao")
                        .WithMany()
                        .HasForeignKey("HabilitacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habilitacao");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.GrupoDeCusto", b =>
                {
                    b.Navigation("Despesas");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Veiculo", b =>
                {
                    b.Navigation("Despesas");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Viagens");
                });

            modelBuilder.Entity("InfoFretamento.Domain.Entities.Motorista", b =>
                {
                    b.Navigation("Viagens");
                });
#pragma warning restore 612, 618
        }
    }
}
